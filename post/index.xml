<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on liam</title>
    <link>https://liam12138.github.io/post/</link>
    <description>Recent content in Posts on liam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Dec 2020 13:37:40 +0800</lastBuildDate>
    
	<atom:link href="https://liam12138.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java并发编程-显式锁</title>
      <link>https://liam12138.github.io/post/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E6%98%BE%E5%BC%8F%E9%94%81/</link>
      <pubDate>Mon, 14 Dec 2020 13:37:40 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E6%98%BE%E5%BC%8F%E9%94%81/</guid>
      <description>在 Java5.0 之前，在协调对对象的访问时可以使用的机制只有 synchronized 和 volatile。Java5.0 增加了一种新的机制：ReentrantLock，ReentrantLock 并不是一种替代的内置加锁的方法，而是内置加锁机制不适用时，作为一种可选择的高级功能。 1. Lock 与 ReentrantLock 下面给出了 Lock 接口，Lock 接口中定义了一组抽象的加锁操作，与内置加锁机制不同的是，Lock 提供了一种无条件的、可轮询的、定时的以及可以中断的锁获取操作，所有加锁和解锁的方式都是显式的。在 Lock 的实现中必须提供与内部锁相同的内存可见性语义，但在加锁语义、调度算法、顺序保证以及性能特性等方方面面可以有所不同。</description>
    </item>
    
    <item>
      <title>Redis之分布式锁</title>
      <link>https://liam12138.github.io/post/redis%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Thu, 10 Dec 2020 18:09:14 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/redis%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>分布式应用进行逻辑处理时经常会遇到并发问题。比如，一个操作要修改用户状态，修改状态需要先读出用户的状态，在内存里进行修改，改完再存进去。如果有多个系统同时今夕操作，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。
这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁就是最广泛的方案之一。
分布式锁 分布式锁本质上要实现的目标就是在 Redis 里面占有一个位置，当别的进程也要来占用时，发现已经有人占用了，就只能放弃或者稍后再试。
对于这样的操作，我们一般使用 setnx(set if not exists) 指令，只允许一个客户端占用，用完之后再调用 del 指令释放。</description>
    </item>
    
    <item>
      <title>Java并发编程-可利用的并行性</title>
      <link>https://liam12138.github.io/post/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%8F%AF%E5%88%A9%E7%94%A8%E7%9A%84%E5%B9%B6%E8%A1%8C%E6%80%A7/</link>
      <pubDate>Tue, 01 Dec 2020 08:42:38 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%8F%AF%E5%88%A9%E7%94%A8%E7%9A%84%E5%B9%B6%E8%A1%8C%E6%80%A7/</guid>
      <description>Executor 框架帮助指定执行策略，但如果要使用 Executor，必须将任务表述为一个 Runnable。在大多数服务器应用程序中都存在一个明显的任务边界：单个客户请求。有时候，任务边界并非是显而易见的，在很多桌面应用程序中，在单个客户请求中任可能存在可发掘的并行性。本文以 HTML 页面绘制为例，进行详细说明。
1. 串行的页面渲染器 最简单的方法就是对 HTML 文档进行串行处理。当遇到文本标签时，将其绘制到图像缓存中。当遇到图像引用时，先通过网络获取它，然后再将其绘制到图像缓存中。这种方式可能会用户感到烦恼，用户需要等待很长时间，直到现实所有文本。</description>
    </item>
    
    <item>
      <title>Java并发编程-Executor框架</title>
      <link>https://liam12138.github.io/post/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-executor%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Fri, 27 Nov 2020 17:45:06 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-executor%E6%A1%86%E6%9E%B6/</guid>
      <description>1. 在线程中执行任务 在理想情况下，各个任务之间是相互独立的：任务并不依赖于其他任务的状态、结果或者边界效应，独立性有助于实现并发，因为如果存在足够多的处理资源，那么这些独立的任务都可以并行执行。为了在调度与负载均衡等过程中实现更高的灵活性，每项任务还应该表示应用程序的一小部分处理能力。
2. 串行的执行任务 在应用程序中可以通过多种策略来调度任务，而其中一些策略能够更好地利用潜在的并发性。最简单的策略就是在单个线程中串行地执行各项任务。如下：
public class SingleThreadWebServer { public static void main(String[] args) throws IOException { ServerSocket socket = new ServerSocket(80); // 串行地执行任务  while (true) { Socket connection = socket.</description>
    </item>
    
    <item>
      <title>Redis之主从同步</title>
      <link>https://liam12138.github.io/post/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Tue, 24 Nov 2020 10:54:39 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</guid>
      <description>在很多时候，我们为了达到 Redis 的高可用，我们都会做主从。有了主从，当 master 挂掉的时候，运维让从库来接管，服务就可以继续，否则master 需要经过数据恢复和重启的过程，这就可能会拖很长的时间，影响线上业务的持续服务。 1. CAP 原理 分布式存储的理论基石 1.</description>
    </item>
    
    <item>
      <title>Redis之事务</title>
      <link>https://liam12138.github.io/post/redis%E4%B9%8B%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Wed, 11 Nov 2020 20:58:50 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/redis%E4%B9%8B%E4%BA%8B%E5%8A%A1/</guid>
      <description>Redis 之事务 为了确保连续多个操作的原子性，一个成熟的数据库通常都会有事务支持，Redis 也同样如此。Redis 的事务使用非常简单，不同于关系数据库，我们无须理解那么多复杂的事务模 型，就可以直接使用。
1. Redis 事务的基本使用 每个事务的操作都有 begin、commit 和 rollback，begin 指示事务的开始，commit 指示 事务的提交，rollback 指示事务的回滚。</description>
    </item>
    
    <item>
      <title>Hugo新建文档操作</title>
      <link>https://liam12138.github.io/post/hugo%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 07 Oct 2020 21:17:40 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/hugo%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C/</guid>
      <description>hugo更新博客操作 1. 使用 hugo 命令新建一个 md 文件 命令：hugo new FileName.md（myblog目录下）</description>
    </item>
    
    <item>
      <title>Spark 配置参数</title>
      <link>https://liam12138.github.io/post/spark%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 10 Sep 2020 13:43:01 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/spark%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/</guid>
      <description>Spark 配置参数 #配置 Storage 内存区域大小，默认为 0.6，即 60%spark.storage.memoryFraction=0.6 #Executor 堆外内存，默认 300GB，需要在 Spark 的启动脚本中配置spark.</description>
    </item>
    
    <item>
      <title>Spring 持久层</title>
      <link>https://liam12138.github.io/post/spring-%E6%8C%81%E4%B9%85%E5%B1%82/</link>
      <pubDate>Mon, 01 Jun 2020 11:46:01 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/spring-%E6%8C%81%E4%B9%85%E5%B1%82/</guid>
      <description>第一章、持久层整合 1、Spring 框架为什么要与持久层技术整合 1、JavaEE 开发需要持久层进行数据库的访问操作； 2、JDBC Hibernate MyBatis 进行持久开发过程存在大量的代码冗余； 3、Spring 基于模板设计模式对于上述的持久层技术进行了封装。 2、Spring 可以与哪些持久层技术整合 1、JDBC JDBCTemplate 2、Hibern （JPA） HibernateTemplate 3、MyBatis SQLSessionFactoryBean MapperScannerConfigure 第二章、Spring 与 MyBatis 整合 1、MyBatis 开发步骤的回顾 1、实体 2、实体别名 3、表 4、创建 DAO 接口 5、实现 Mapper 文件 6、注册 Mapper 文件 7、MybatisAPI 调用 2、MyBatis 在开发中的问题 1、开发繁琐 2、代码冗余 3、Spring 与 MyBatis 的整合 4、Spring 与 MyBatis 整合的开发步骤   搭建开发环境（jar）</description>
    </item>
    
    <item>
      <title>Spring 注解</title>
      <link>https://liam12138.github.io/post/spring-%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jun 2020 11:46:01 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/spring-%E6%B3%A8%E8%A7%A3/</guid>
      <description>第一章、注解基础概念 1. 什么是注解编程 在类或者方法上加入特定的注解(@XXX)，完成特定功能的开发 @Component public class XXX() 2. 为什么要讲注解编程 1.</description>
    </item>
    
    <item>
      <title>Spring AOP</title>
      <link>https://liam12138.github.io/post/springaop/</link>
      <pubDate>Sun, 10 May 2020 12:46:01 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/springaop/</guid>
      <description>第一章、AOP编程 1、AOP概念 AOP(Aspect Oriented Programing) 面向切面编程 = Spring 动态代理开发 以切面为基本单位的程序开发，通过切面间的彼此协同，完成程序的构建 切面 = 切入点 + 额外功能 OOP(Object Oriented Programing) 面向对象编程 Java 以对象为基本单位的程序开发，通过对象的彼此协同，相互调用，完成程序的构建 POP(Producer Oriented Programing) 面向过程编程 C 以过程为基本单位的程序开发 AOP概念： 本质就是 Spring 的动态代理开发，通过代理类为原始类增加额外功能。 好处：利于原始类的维护 注意：AOP编程不可能取代OOP，OOP编程有意补充。 2、AOP编程的开发步骤 原始对象额外功能（MethodInterceptor）切入点组装切面（额外功能 + 切入点）3、切面的名词解释 第二章、AOP的底层原理 1、核心问题 1、AOP如何创建动态代理类（动态字节码技术）2、Spring工厂如何加工创建代理对象通过原始对象的id值，获得的是代理对象2、动态代理类的创建 2.</description>
    </item>
    
    <item>
      <title>大数据相关知识点</title>
      <link>https://liam12138.github.io/post/bigdata1/</link>
      <pubDate>Mon, 20 Apr 2020 18:46:01 +0800</pubDate>
      
      <guid>https://liam12138.github.io/post/bigdata1/</guid>
      <description>1、HDFS HDFS概念 HDFS 是一个分布式的文件系统，由很多服务器联合起来实现其功能。
优点
高容错性、适合处理大量的数据、可以构建在廉价的机器上。
缺点
不适合低延时访问、无法对大量 的小文件进行存储、不支持并发写和修改。
组成架构</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liam12138.github.io/post/%E5%AE%89%E8%A3%85windows%E7%89%88rabbitmq%E5%A4%B1%E8%B4%A5%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liam12138.github.io/post/%E5%AE%89%E8%A3%85windows%E7%89%88rabbitmq%E5%A4%B1%E8%B4%A5%E6%80%BB%E7%BB%93/</guid>
      <description>安装Windows版RabbitMQ失败总结 这几天在学习RabbitMQ，由于实习公司要求安装Windows版本的，试了一下安装Windows版本的RabbitMQ。经过一天的折腾可总算把RabbitMQ给安装好了。 1. 错误界面 每次输入 rabbitmqctl status 或者 rabbitmqctl 的其他指令时，都会出现类似于下面的错误 上述显示的错误主要有三个点： 1.</description>
    </item>
    
  </channel>
</rss>